<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A*算法及其应用</title>
      <link href="/algorithm/ef3eeb15/"/>
      <url>/algorithm/ef3eeb15/</url>
      
        <content type="html"><![CDATA[<div class="note default">            <p>最近在淘宝店铺接到了一个关于A*算法的assignment，借此机会学习了一下并记录一下，以这个assignment作为例子</p>          </div><a id="more"></a><h3 id="Heuristic-Search（启发式搜索）"><a href="#Heuristic-Search（启发式搜索）" class="headerlink" title="Heuristic Search（启发式搜索）"></a>Heuristic Search（启发式搜索）</h3><p>启发式搜索就是会有目的地搜索，一般通过一个启发函数来进行选择，选择代价最少的结点作为下一步搜索结点。<code>DFS</code>和<code>BFS</code>都属于盲目型搜索，不会在下一步搜索时选择最优的结点进行跳转，存在需要试探整个解集空间的可能，只能适用于问题规模不大的搜索问题中</p><blockquote><p>而与<code>DFS</code>和<code>BFS</code>不同的是，一个经过仔细设计的启发函数，往往在很快的时间内就可得到一个搜索问题的最优解，对于NP问题，亦可在多项式时间内得到一个较优解。是的，关键就是如何设计这个启发函数</p></blockquote><h3 id="A-algorithm"><a href="#A-algorithm" class="headerlink" title="A* algorithm"></a>A* algorithm</h3><p>A-Star算法，俗称A星算法，这是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法。常用于游戏中的NPC的移动计算，或网络游戏中的BOT的移动计算上。</p><p>该算法综合了Best-First Search和<a href="https://zh.wikipedia.org/wiki/Dijkstra%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Dijkstra算法</a>的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径（基于评估函数）。</p><p>在此算法中，如果以$g(n)$表示从起点到任意顶点$n$的实际距离，$h(n)$表示任意顶点$n$到目标顶点的估算距离（根据所采用的评估函数的不同而变化），那么A*算法的估算函数为</p><script type="math/tex; mode=display">f(n)=g(n)+h(n)</script><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>如果$g(n)$为0，即只计算任意顶点$n$到目标的评估函数$h(n)$，而不计算起点到顶点$n$的距离，则算法转化为使用贪心策略的<code>Best-First Search</code>，速度最快，但可能得不出最优解</li><li>如果$h(n)$不高于顶点$n$到目标顶点的实际距离，则一定可以求出最优解，而且$h(n)$越小，需要计算的节点越多，算法效率越低，常见的评估函数有——<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">欧几里得距离</a>、<a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%93%88%E9%A0%93%E8%B7%9D%E9%9B%A2" target="_blank" rel="noopener">曼哈顿距离</a>、<a href="https://zh.wikipedia.org/wiki/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">切比雪夫距离</a></li><li>如果$h(n)$为0，即只需求出起点到任意顶点$n$的最短路径$g(n)$，而不计算任何评估函数$h(n)$，则转化为<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">单源最短路径</a>问题，即<a href="https://zh.wikipedia.org/wiki/Dijkstra%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Dijkstra算法</a>，此时需要计算最多的定点</li></ul><p>简单来解释，就是使用$g(n)$计算路径长度，$h(n)$估计到目标的距离，用$f$值维护优先队列。</p><h3 id="A-算法流程"><a href="#A-算法流程" class="headerlink" title="A*算法流程"></a>A*算法流程</h3><p>首先将起始结点<code>S</code>放入<code>open_list</code>，<code>close_list</code>置空</p><ol><li>如果<code>open_list</code>不为空，从表头取一个结点<code>n</code>，如果为空算法失败</li><li>判断<code>n</code>是否为目标解。是，找到一个解（继续寻找，或终止算法）</li><li>对于<code>n</code>的所有后继结点（可以走到的结点），如果不在<code>close_list</code>中，就放入<code>open_list</code>，同时计算每一个后继结点的$f(n)$值，将<code>open_list</code>按$f$值从小到大排序维护优先队列，并把<code>n</code>放入<code>close_list</code>，重复算法，回到1</li></ol><h3 id="问题及代码"><a href="#问题及代码" class="headerlink" title="问题及代码"></a>问题及代码</h3><ol><li><p>N数码问题（类似华容道）</p><p>对于任意大小的数码问题，有一格是空的，向四个方向滑块，目标状态为0在最右下角，并且1~N-1按顺序摆放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tile_puzzle</span><span class="params">(rows, cols)</span>:</span></span><br><span class="line">    puz=[[i+<span class="number">1</span>+cols*j <span class="keyword">if</span> i+<span class="number">1</span>+cols*j != rows*cols <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(cols)]<span class="keyword">for</span> j <span class="keyword">in</span> range(rows)]</span><br><span class="line">    <span class="keyword">return</span> TilePuzzle(puz)</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> visit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TilePuzzle</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, board, g=<span class="number">0</span>, h=<span class="number">0</span>, f=<span class="number">0</span>, op=None, parent=None)</span>:</span></span><br><span class="line">        self.board=board</span><br><span class="line">        self.row=len(board)</span><br><span class="line">        self.col=len(board[<span class="number">0</span>])</span><br><span class="line">        self.g = g</span><br><span class="line">        self.h = h</span><br><span class="line">        self.f = f</span><br><span class="line">        self.op = op</span><br><span class="line">        self.parent = parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_board</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.board</span><br><span class="line">                            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_move</span><span class="params">(self, direction)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> self.board:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> row:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a= self.board.index(row)</span><br><span class="line">                b= row.index(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">"up"</span>:</span><br><span class="line">            <span class="keyword">if</span> a<span class="number">-1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">                self.board[a][b],self.board[a<span class="number">-1</span>][b] = self.board[a<span class="number">-1</span>][b],self.board[a][b]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>                  </span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">"down"</span>:</span><br><span class="line">            <span class="keyword">if</span> a+<span class="number">1</span> &lt; self.row:</span><br><span class="line">                self.board[a+<span class="number">1</span>][b],self.board[a][b] = self.board[a][b],self.board[a+<span class="number">1</span>][b]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">"left"</span>:</span><br><span class="line">            <span class="keyword">if</span> b<span class="number">-1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">                self.board[a][b],self.board[a][b<span class="number">-1</span>] = self.board[a][b<span class="number">-1</span>],self.board[a][b]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>        </span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">"right"</span>:</span><br><span class="line">            <span class="keyword">if</span> b+<span class="number">1</span> &lt; self.col:</span><br><span class="line">                self.board[a][b],self.board[a][b+<span class="number">1</span>] = self.board[a][b+<span class="number">1</span>],self.board[a][b]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_solved</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.board[<span class="number">-1</span>][<span class="number">-1</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.col):</span><br><span class="line">                <span class="keyword">if</span> (i,j) == (self.row<span class="number">-1</span>, self.col<span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> self.board[i][j] != i*self.col+j+<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(self)</span>:</span></span><br><span class="line">        new = copy.deepcopy(self.board)</span><br><span class="line">        <span class="keyword">return</span> TilePuzzle(new)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">successors</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''求可能的后继节点'''</span></span><br><span class="line">        newBoard = self.copy()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">"up"</span>,<span class="string">"down"</span>,<span class="string">"left"</span>,<span class="string">"right"</span>]:</span><br><span class="line">            <span class="keyword">if</span> newBoard.perform_move(x) == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">yield</span> (x,newBoard)</span><br><span class="line">                newBoard=self.copy()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iddfs_helper</span><span class="params">(self, limit, moves)</span>:</span></span><br><span class="line">    <span class="string">'''此为dfs解法'''</span></span><br><span class="line">        <span class="keyword">global</span> visit</span><br><span class="line">        <span class="keyword">if</span> limit == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> (moves, <span class="literal">True</span>) <span class="keyword">if</span> self.is_solved() <span class="keyword">else</span> ([], <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">for</span> move, board <span class="keyword">in</span> self.successors():</span><br><span class="line">            <span class="keyword">if</span> board.board <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">                moves.append(move)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> board.is_solved():</span><br><span class="line">                    visit.append(board.board)</span><br><span class="line">                <span class="comment"># dfs</span></span><br><span class="line">                m, f = next(board.iddfs_helper(limit<span class="number">-1</span>, moves))</span><br><span class="line">                <span class="keyword">if</span> f:</span><br><span class="line">                    <span class="keyword">yield</span> (m, <span class="literal">True</span>)</span><br><span class="line">                <span class="comment"># 回溯</span></span><br><span class="line">                moves.pop()</span><br><span class="line">                visit.pop()</span><br><span class="line">        <span class="keyword">yield</span> (moves, <span class="literal">True</span>) <span class="keyword">if</span> self.is_solved() <span class="keyword">else</span> ([], <span class="literal">False</span>)</span><br><span class="line">            </span><br><span class="line">                               </span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_solutions_iddfs</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''此为dfs解法'''</span></span><br><span class="line">        limit = <span class="number">0</span></span><br><span class="line">        f = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">global</span> visit </span><br><span class="line">        visit = [self.board]</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> f:</span><br><span class="line">            moves, f = next(self.iddfs_helper(limit, []))</span><br><span class="line">            <span class="keyword">if</span> f:</span><br><span class="line">                <span class="keyword">while</span> f:</span><br><span class="line">                    <span class="keyword">yield</span> moves</span><br><span class="line">                    moves, f = next(self.iddfs_helper(limit, []))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            limit += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_path</span><span class="params">(self)</span>:</span></span><br><span class="line">        path = []</span><br><span class="line">        puzzle = self</span><br><span class="line">        <span class="keyword">while</span> puzzle.parent:</span><br><span class="line">            path.append(puzzle.op)</span><br><span class="line">            puzzle = puzzle.parent</span><br><span class="line">        <span class="keyword">return</span> list(reversed(path)) <span class="keyword">if</span> path <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heuristic_cost_estimate</span><span class="params">(self)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.col):</span><br><span class="line">                <span class="keyword">if</span> self.board[i][j] == <span class="number">0</span>:</span><br><span class="line">                    h += self.row-i+self.col-j<span class="number">-2</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                h += abs((self.board[i][j]<span class="number">-1</span>) // self.col - i) + abs((self.board[i][j]<span class="number">-1</span>) % self.col - j)</span><br><span class="line">        <span class="keyword">return</span> h    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_solution_a_star</span><span class="params">(self)</span>:</span></span><br><span class="line">        open_list = [self]</span><br><span class="line">        close_list = []</span><br><span class="line">        <span class="keyword">while</span> open_list:</span><br><span class="line">            puzzle = open_list.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> puzzle.is_solved():</span><br><span class="line">                <span class="keyword">return</span> puzzle.print_path()</span><br><span class="line">            <span class="keyword">for</span> move, p <span class="keyword">in</span> list(puzzle.successors()):  </span><br><span class="line">                <span class="keyword">if</span> p.board <span class="keyword">not</span> <span class="keyword">in</span> [_.board <span class="keyword">for</span> _ <span class="keyword">in</span> close_list]:</span><br><span class="line">                    p.g = puzzle.g + <span class="number">1</span></span><br><span class="line">                    p.h = p.heuristic_cost_estimate()</span><br><span class="line">                    p.f = p.g + p.h</span><br><span class="line">                    p.parent = puzzle</span><br><span class="line">                    p.op = move</span><br><span class="line">                    open_list.append(p)</span><br><span class="line">                open_list.sort(key=operator.attrgetter(<span class="string">'f'</span>))</span><br><span class="line">                close_list.append(puzzle)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li><li><p>Linear Disk Movement</p><p>在一行长为$L$的格子中，开头摆放1-n的$n$个块，一个块有两种方式移动，第一种为向左或右移动一格，第二种为向左或向右隔着一个块跳到第二格，目标是全部摆放在最右边，并且为逆序n-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, line, g=<span class="number">0</span>, h=<span class="number">0</span>, op=None, parent=None)</span>:</span></span><br><span class="line">        self.line = line</span><br><span class="line">        self.g = g</span><br><span class="line">        self.h = h</span><br><span class="line">        self.f = g+h</span><br><span class="line">        self.op = op</span><br><span class="line">        self.parent = parent</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_h</span><span class="params">(line)</span>:</span></span><br><span class="line">    h = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(line):</span><br><span class="line">        <span class="keyword">if</span> v:</span><br><span class="line">            <span class="comment"># 估算为距离除2，因为最多跳2格</span></span><br><span class="line">            h += math.ceil(abs((len(line)-v-i))/<span class="number">2.0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+h</span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">possible_line</span><span class="params">(line)</span>:</span></span><br><span class="line">    <span class="comment"># 求4种可能的跳法</span></span><br><span class="line">    possible_list = []</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(line.line):</span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">and</span> i+<span class="number">2</span> &lt; len(line.line) <span class="keyword">and</span> line.line[i+<span class="number">1</span>] <span class="keyword">and</span> line.line[i+<span class="number">2</span>] == <span class="number">0</span>:</span><br><span class="line">            new_line = line.line[:]</span><br><span class="line">            new_line[i] = <span class="number">0</span></span><br><span class="line">            new_line[i+<span class="number">2</span>] = v</span><br><span class="line">            possible_list.append(Line(new_line, g=line.g+<span class="number">1</span>, h=cal_h(new_line), op=(i, i+<span class="number">2</span>), parent=line))</span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">and</span> i+<span class="number">1</span> &lt; len(line.line) <span class="keyword">and</span> line.line[i+<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">            new_line = line.line[:]</span><br><span class="line">            new_line[i] = <span class="number">0</span></span><br><span class="line">            new_line[i+<span class="number">1</span>] = v</span><br><span class="line">            possible_list.append(Line(new_line, g=line.g+<span class="number">1</span>, h=cal_h(new_line), op=(i, i+<span class="number">1</span>), parent=line))</span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">and</span> i<span class="number">-1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> line.line[i<span class="number">-1</span>] == <span class="number">0</span>:</span><br><span class="line">            new_line = line.line[:]</span><br><span class="line">            new_line[i] = <span class="number">0</span></span><br><span class="line">            new_line[i<span class="number">-1</span>] = v</span><br><span class="line">            possible_list.append(Line(new_line, g=line.g+<span class="number">1</span>, h=cal_h(new_line), op=(i, i<span class="number">-1</span>), parent=line))      </span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">and</span> i<span class="number">-2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> line.line[i<span class="number">-1</span>] <span class="keyword">and</span> line.line[i<span class="number">-2</span>] == <span class="number">0</span>:</span><br><span class="line">            new_line = line.line[:]</span><br><span class="line">            new_line[i] = <span class="number">0</span></span><br><span class="line">            new_line[i<span class="number">-2</span>] = v</span><br><span class="line">            possible_list.append(Line(new_line, g=line.g+<span class="number">1</span>, h=cal_h(new_line), op=(i, i<span class="number">-2</span>), parent=line))    </span><br><span class="line">    <span class="keyword">return</span> possible_list</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_solved</span><span class="params">(line, ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> line == ans <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_path</span><span class="params">(line)</span>:</span></span><br><span class="line">    <span class="comment"># 打印路径</span></span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">while</span> line.parent:</span><br><span class="line">        path.append(line.op)</span><br><span class="line">        line = line.parent</span><br><span class="line">    <span class="keyword">return</span> list(reversed(path))</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_distinct_disks</span><span class="params">(length, n)</span>:</span></span><br><span class="line">    line = [i+<span class="number">1</span> <span class="keyword">if</span> i &lt; n <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(length)]</span><br><span class="line">    ans = list(reversed(line))</span><br><span class="line">    open_list = [Line(line, <span class="number">0</span>)]</span><br><span class="line">    close_list = []</span><br><span class="line">    <span class="keyword">while</span> open_list:</span><br><span class="line">        line = open_list.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> is_solved(line.line, ans):</span><br><span class="line">            <span class="keyword">return</span> print_path(line)</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> possible_line(line):</span><br><span class="line">            <span class="keyword">if</span> l.line <span class="keyword">not</span> <span class="keyword">in</span> [_.line <span class="keyword">for</span> _ <span class="keyword">in</span> close_list]:</span><br><span class="line">                open_list.append(l)</span><br><span class="line">        open_list.sort(key=operator.attrgetter(<span class="string">'f'</span>))</span><br><span class="line">        close_list.append(line)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimax+Alpha-Beta pruning及其应用</title>
      <link href="/algorithm/8fcfbd4c/"/>
      <url>/algorithm/8fcfbd4c/</url>
      
        <content type="html"><![CDATA[<div class="note default">            <p>最近在淘宝做一份assignment的时候用到了Minimax+Alpha-Beta剪枝，一般使用在棋类等双方较量的游戏和程序中</p>          </div><a id="more"></a><h3 id="Minimax算法"><a href="#Minimax算法" class="headerlink" title="Minimax算法"></a>Minimax算法</h3><p>极小化极大算法常用于棋类等由两方较量的游戏和程序。该算法是一个<a href="https://zh.wikipedia.org/wiki/%E9%9B%B6%E5%92%8C%E5%8D%9A%E5%BC%88" target="_blank" rel="noopener">零总和</a>算法，即一方要在可选的选项中选择将其优势最大化的选择，另一方则选择令对手优势最小化的方法。而开始的时候总和为0。很多棋类游戏可以采取此算法，例如<a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%AD%97%E6%A3%8B" target="_blank" rel="noopener">井字棋</a>（tic-tac-toe）</p><ol><li>Minimax是一种悲观算法，即假设对手每一步都会将我方引入从当前看理论上价值最小的格局方向，即对手具有完美决策能力</li><li>Minimax不找理论最优解，Minimax中我方完全掌握主动，如果对方每一步决策都是完美的，则我方可以达到预计的最小损失格局</li></ol><h3 id="Minimax算法流程"><a href="#Minimax算法流程" class="headerlink" title="Minimax算法流程"></a>Minimax算法流程</h3><ol><li>确定最大搜索深度$D$</li><li>在$D$的格局树的叶子结点上，使用预定义的价值函数对叶子结点进行评价</li><li>自底向上为非叶子节点赋值。其中max节点取子节点最大值，min节点取子节点最小值</li><li>每次轮到我方时（此时必处在格局树的某个max节点），选择价值等于此max节点价值的那个子节点路径</li></ol><h3 id="Alpha-Beta-Pruning"><a href="#Alpha-Beta-Pruning" class="headerlink" title="Alpha-Beta Pruning"></a>Alpha-Beta Pruning</h3><p>Alpha-Beta剪枝用于裁剪搜索树中没有意义的不需要搜索的树枝，以提高运算速度</p><p>假设$\alpha$为下界，$\beta$为上界，对于$\alpha&lt;=N&lt;=\beta$:</p><ul><li><p>若$\alpha&lt;=\beta$ 则$N$有解</p></li><li><p>若 $\alpha&gt;\beta$ 则$N$无解</p></li></ul><p>简单来说就是不是先生成整棵树，而是先探索到第一种叶子格局，以此记录$\alpha$和$\beta$的值，以限制之后进行剪枝搜索。</p><ol><li>对手想要我方获利小，则轮到min节点要使$\beta$尽可能小</li><li>我方想要获利大，则轮到max节点要使$\alpha$尽可能大</li><li>若 $\alpha&gt;\beta$ 则表明我方一定选择之前$\alpha$的那一种，不会选择接下来的搜索到的这一种最大只有$\beta$的收益，则进行剪枝</li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Dominoes Game，双方在二维棋盘上放1*2大小的木块，一方只能竖着放，另一方只能横着放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dominoes_game</span><span class="params">(rows, cols)</span>:</span></span><br><span class="line">    Total = [[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(cols)] <span class="keyword">for</span> i <span class="keyword">in</span> range(rows)]</span><br><span class="line">    <span class="keyword">return</span> DominoesGame(Total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DominoesGame</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        self.board = board</span><br><span class="line">        self.rows = len(board)</span><br><span class="line">        self.cols = len(board[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_board</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.board</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.board = [[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cols)] <span class="keyword">for</span> i <span class="keyword">in</span> range(self.rows)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_legal_move</span><span class="params">(self, row, col, vertical)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> vertical:</span><br><span class="line">            <span class="keyword">if</span> row &gt;= <span class="number">0</span> <span class="keyword">and</span> row &lt; self.rows <span class="keyword">and</span> col &gt;= <span class="number">0</span> <span class="keyword">and</span> col &lt; self.cols \</span><br><span class="line">            <span class="keyword">and</span> row+<span class="number">1</span> &lt; self.rows <span class="keyword">and</span> <span class="keyword">not</span> self.board[row][col] <span class="keyword">and</span> <span class="keyword">not</span> self.board[row+<span class="number">1</span>][col]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> row &gt;= <span class="number">0</span> <span class="keyword">and</span> row &lt; self.rows <span class="keyword">and</span> col &gt;= <span class="number">0</span> <span class="keyword">and</span> col &lt; self.cols \</span><br><span class="line">            <span class="keyword">and</span> col+<span class="number">1</span> &lt; self.cols <span class="keyword">and</span> <span class="keyword">not</span> self.board[row][col] <span class="keyword">and</span> <span class="keyword">not</span> self.board[row][col+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">legal_moves</span><span class="params">(self, vertical)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.rows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.cols):</span><br><span class="line">                <span class="keyword">if</span> self.is_legal_move(i, j, vertical):</span><br><span class="line">                    <span class="keyword">yield</span> (i, j)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_move</span><span class="params">(self, row, col, vertical)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> vertical:</span><br><span class="line">            self.board[row][col] = self.board[row+<span class="number">1</span>][col] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.board[row][col] = self.board[row][col+<span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_over</span><span class="params">(self, vertical)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> list(self.legal_moves(vertical)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DominoesGame([row[:] <span class="keyword">for</span> row <span class="keyword">in</span> self.board])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">successors</span><span class="params">(self, vertical)</span>:</span></span><br><span class="line">    <span class="string">'''当前棋盘可能的所有存放情况，生成器函数'''</span></span><br><span class="line">        <span class="keyword">for</span> move <span class="keyword">in</span> self.legal_moves(vertical):</span><br><span class="line">            g = self.copy()</span><br><span class="line">            g.perform_move(move[<span class="number">0</span>], move[<span class="number">1</span>], vertical)</span><br><span class="line">            <span class="keyword">yield</span> move, g</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_move</span><span class="params">(self, vertical)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(list(self.legal_moves(vertical)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_best_move</span><span class="params">(self, vertical, limit)</span>:</span></span><br><span class="line">        best_move = ()</span><br><span class="line">        total_num = <span class="number">0</span></span><br><span class="line">        is_max = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># alpha为最小值，beta为最大值</span></span><br><span class="line">        alpha = -sys.maxint</span><br><span class="line">        beta = sys.maxint</span><br><span class="line">        best_move, value, total_num = self.alpha_beta_search(is_max, alpha, beta, vertical, limit)</span><br><span class="line">        <span class="keyword">return</span> (best_move, value, total_num)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha_beta_search</span><span class="params">(self, is_max, alpha, beta, vertical, limit)</span>:</span></span><br><span class="line">        total_num = <span class="number">0</span></span><br><span class="line">        best_move = ()</span><br><span class="line">        <span class="keyword">if</span> limit == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 我方的可放的情况数 - 对手的可放的情况数</span></span><br><span class="line">            value = len(list(self.legal_moves(vertical))) - len(list(self.legal_moves(<span class="keyword">not</span> vertical)))</span><br><span class="line">            <span class="keyword">return</span> (), value, <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># xor用来计算当前是竖着还是横着</span></span><br><span class="line">            <span class="keyword">for</span> move, g <span class="keyword">in</span> self.successors(<span class="keyword">not</span> is_max ^ vertical):</span><br><span class="line">                <span class="keyword">if</span> alpha &lt; beta:</span><br><span class="line">                    _, value, num = g.alpha_beta_search(<span class="keyword">not</span> is_max, alpha, beta, vertical, limit<span class="number">-1</span>)</span><br><span class="line">                    total_num += num</span><br><span class="line">                    <span class="comment"># 更新alpha值</span></span><br><span class="line">                    <span class="keyword">if</span> is_max <span class="keyword">and</span> value &gt; alpha:</span><br><span class="line">                        alpha = value</span><br><span class="line">                        best_move = move</span><br><span class="line">                    <span class="comment"># 更新beta的值</span></span><br><span class="line">                    <span class="keyword">elif</span> <span class="keyword">not</span> is_max <span class="keyword">and</span> value &lt; beta:</span><br><span class="line">                        beta = value</span><br><span class="line">        <span class="keyword">return</span> best_move, alpha <span class="keyword">if</span> is_max <span class="keyword">else</span> beta, total_num</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minimax </tag>
            
            <tag> Alpha-Beta Pruning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
